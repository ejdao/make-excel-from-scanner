import { trigger, state, style, transition, animate } from '@angular/animations';
import {
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  OnDestroy,
  OnInit,
  ViewChild,
} from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { saveAsExcel } from '@eklipse/utilities';
import { debounceTime, Subject, takeUntil } from 'rxjs';
import { STORAGE_KEYS } from 'src/app/app.constants';
import { GcmModalService } from '../modal';
@Component({
  selector: 'app-table',
  templateUrl: './table.component.html',
  styleUrls: ['./table.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
  animations: [
    trigger('detailExpand', [
      state('collapsed', style({ height: '0px', minHeight: '0' })),
      state('expanded', style({ height: '*' })),
      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
  ],
})
export class TableComponent implements OnInit, OnDestroy {
  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;
  @ViewChild(MatSort, { static: true }) sort!: MatSort;

  private _unsubscribe$ = new Subject<void>();

  expandedElement: any;

  responsiveMode = true;

  searchKey = new FormControl('');

  dataInput = new FormControl('');

  displayedColumns: string[] = [];
  displayedColumnsSliced: string[] = [];
  displayedAlias: string[] = [];
  displayedAliasSliced: string[] = [];
  displayedCssClasses: string[] = [];

  refactor = false;

  dataSource: any = new MatTableDataSource<any>([]);

  constructor(private _cd: ChangeDetectorRef, private _modal: GcmModalService) {
    this.dataInput.valueChanges
      .pipe(takeUntil(this._unsubscribe$), debounceTime(500))
      .subscribe(value => {
        this._insertData(value);
        this.dataInput.setValue(null, { emitEvent: false });
      });

    this.searchKey.valueChanges.pipe(takeUntil(this._unsubscribe$)).subscribe(value => {
      this.dataSource.filter = this.searchKey.value.trim().toLowerCase();
    });
  }

  private _insertData(value: string) {
    let arrayFromValue = value.split(';');
    let newObject: any = {};
    newObject.autogeneratedId =
      Number(new Date().getTime().toString().slice(8)) + Math.ceil(Math.random() * 1546);

    arrayFromValue.map((_: any, i) => {
      newObject[this.displayedColumns[i]] = isNaN(_) ? _ : Number(_);
    });

    const oldArray = this.dataSource.data;

    oldArray.unshift(newObject);

    this._instanceDataSource(oldArray);

    localStorage.setItem(STORAGE_KEYS.values, JSON.stringify(oldArray));
  }

  public ngOnInit(): void {
    this.renderTable();

    const init =
      localStorage.getItem(STORAGE_KEYS.values) !== null
        ? JSON.parse(localStorage.getItem(STORAGE_KEYS.values)!)
        : [];

    this._instanceDataSource(init);
  }

  public remove(element: any) {
    this._modal.confirm('多Realmente desea eliminar este registro?', '多Segur@?').subscribe(value => {
      if (value) {
        const values = this.dataSource.data.filter(
          (_: any) => element.autogeneratedId !== _.autogeneratedId
        );

        localStorage.setItem(STORAGE_KEYS.values, JSON.stringify(values));
        this._instanceDataSource(values);
      }
    });
  }

  public clearTable() {
    this._modal
      .confirm('多Realmente desea descartar todos los registros?', '多Segur@?')
      .subscribe(value => {
        if (value) {
          localStorage.setItem(STORAGE_KEYS.values, JSON.stringify([]));
          this._instanceDataSource([]);
        }
      });
  }

  public onSeeInfo(index: number) {}

  public generateExcel() {
    saveAsExcel(this.dataSource.filteredData);
  }

  public renderTable() {
    this.refactor = true;

    const displayedColumns = JSON.parse(localStorage.getItem(STORAGE_KEYS.columns)!);
    const slicedAt = displayedColumns.lenght;

    this.displayedColumnsSliced = displayedColumns.slice(0, slicedAt);

    displayedColumns.push('actions');
    this.displayedColumnsSliced.push('actions');

    this.displayedColumns = displayedColumns;

    const displayedAlias =
      localStorage.getItem(STORAGE_KEYS.alias) &&
      JSON.parse(localStorage.getItem(STORAGE_KEYS.alias)!).length
        ? JSON.parse(localStorage.getItem(STORAGE_KEYS.alias)!)
        : this.displayedColumns;

    const displayedAliasSliced =
      localStorage.getItem(STORAGE_KEYS.alias) &&
      JSON.parse(localStorage.getItem(STORAGE_KEYS.alias)!).length
        ? JSON.parse(localStorage.getItem(STORAGE_KEYS.alias)!).slice(0, slicedAt)
        : this.displayedColumnsSliced.slice(0, slicedAt);

    this.displayedAliasSliced = displayedAliasSliced;

    displayedAlias.push('Acciones');
    this.displayedAliasSliced.push('Acciones');

    this.displayedAlias = displayedAlias;

    this.displayedCssClasses =
      localStorage.getItem(STORAGE_KEYS.classes) &&
      JSON.parse(localStorage.getItem(STORAGE_KEYS.classes)!).length
        ? JSON.parse(localStorage.getItem(STORAGE_KEYS.classes)!)
        : ['col-22-5 bolder', 'col-22-5', 'col-22-5', 'col-22-5'];

    setTimeout(() => {
      this.refactor = false;
      this._cd.markForCheck();
    }, 100);
  }

  public ngOnDestroy(): void {
    this._unsubscribe$.next();
    this._unsubscribe$.complete();
  }

  private _instanceDataSource(data: any = []) {
    this.dataSource = new MatTableDataSource<any>(data);
    this.dataSource.sort = this.sort;
    this.dataSource.paginator = this.paginator;
  }
}
